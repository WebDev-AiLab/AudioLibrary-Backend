# Generated by Django 4.0.4 on 2022-09-16 09:09

from django.conf import settings
import django.contrib.postgres.indexes
import django.contrib.postgres.search
from django.db import migrations, models
import django.db.models.deletion
import tools.upload
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Created date')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated date')),
                ('location_latitude', models.FloatField(blank=True, null=True)),
                ('location_longitude', models.FloatField(blank=True, null=True)),
                ('slug', models.SlugField(default=None, editable=False, max_length=255, null=True, unique=True)),
                ('name', models.CharField(max_length=512, unique=True, verbose_name='Artist Name')),
                ('picture', models.FileField(blank=True, null=True, upload_to=tools.upload.ModifyUpload('artist'))),
                ('picture_thumbnail', models.FileField(blank=True, null=True, upload_to=tools.upload.ModifyUpload('thumbnail'))),
                ('bio', models.TextField(blank=True, null=True, verbose_name='Profile')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Date of birth')),
                ('birth_location', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Place of birth')),
                ('location', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Place of living')),
                ('real_name', models.CharField(blank=True, max_length=255, null=True)),
                ('singer', models.BooleanField(default=False)),
                ('voice_type', models.CharField(blank=True, max_length=64, null=True, verbose_name='Type of Voice')),
                ('hide', models.BooleanField(db_index=True, default=False, help_text='Temporary field, i will remove it very soon', verbose_name='Hide')),
                ('visible', models.BooleanField(db_index=True, default=True, verbose_name='Visible')),
                ('contact_info', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Contact Info')),
                ('is_wikipedia', models.BooleanField(default=False, verbose_name='Has Wikipedia page')),
                ('wikipedia', models.URLField(blank=True, null=True)),
                ('is_daw', models.BooleanField(default=False, verbose_name='DAW')),
                ('daw', models.CharField(blank=True, max_length=255, null=True, verbose_name='DAW')),
                ('status', models.CharField(blank=True, choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=16, null=True)),
                ('discogs', models.URLField(blank=True, db_index=True, null=True)),
                ('beatport', models.URLField(blank=True, db_index=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Created date')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated date')),
                ('name', models.CharField(max_length=512, unique=True, verbose_name='Genre')),
                ('picture', models.FileField(blank=True, null=True, upload_to=tools.upload.ModifyUpload('genre'))),
                ('picture_thumbnail', models.FileField(blank=True, null=True, upload_to=tools.upload.ModifyUpload('thumbnail'))),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Created date')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated date')),
                ('name', models.CharField(max_length=512, unique=True, verbose_name='Label name')),
                ('picture', models.FileField(blank=True, null=True, upload_to=tools.upload.ModifyUpload('label'))),
                ('picture_thumbnail', models.FileField(blank=True, null=True, upload_to=tools.upload.ModifyUpload('thumbnail'))),
                ('description', models.TextField(blank=True, null=True, verbose_name='Profile')),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('founded', models.IntegerField(blank=True, null=True, verbose_name='Year Founded')),
                ('contact_info', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Contact Info')),
                ('slug', models.SlugField(default=None, editable=False, max_length=255, null=True, unique=True)),
                ('discogs', models.URLField(blank=True, db_index=True, null=True)),
                ('beatport', models.URLField(blank=True, db_index=True, null=True)),
                ('sublabel', models.ForeignKey(blank=True, help_text='Set SubLabel from current table', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tracks.label')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Created date')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated date')),
                ('rating', models.CharField(max_length=16)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Style',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Created date')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated date')),
                ('name', models.CharField(max_length=255)),
                ('is_default', models.BooleanField(default=False)),
                ('picture', models.ImageField(blank=True, null=True, upload_to=tools.upload.ModifyUpload('style'))),
                ('picture_thumbnail', models.FileField(blank=True, null=True, upload_to=tools.upload.ModifyUpload('thumbnail'))),
                ('description', models.CharField(blank=True, max_length=2048, null=True)),
                ('genre', models.ManyToManyField(to='tracks.genre')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Created date')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated date')),
                ('slug', models.SlugField(default=None, help_text='Part of the URL on the main Track page. Must me unique.', max_length=255, null=True, unique=True)),
                ('original_file_name', models.CharField(default='track.mp3', max_length=2048)),
                ('file', models.FileField(help_text='.mp3 file location', upload_to=tools.upload.ModifyUpload('file'), verbose_name='.MP3 File')),
                ('waveform', models.FileField(help_text='Link to file with waveform data', upload_to=tools.upload.ModifyUpload('waveform'))),
                ('picture', models.ImageField(upload_to=tools.upload.ModifyUpload('track'))),
                ('picture_thumbnail', models.FileField(blank=True, null=True, upload_to=tools.upload.ModifyUpload('thumbnail'))),
                ('title', models.CharField(blank=True, db_index=True, max_length=2048, null=True, verbose_name='Track title')),
                ('original_artist', models.CharField(blank=True, db_index=True, help_text='Contains artist field from .mp3 tag', max_length=1024, null=True, verbose_name='Artist')),
                ('album', models.CharField(blank=True, db_index=True, max_length=1024, null=True)),
                ('album_artist', models.CharField(blank=True, max_length=1024, null=True)),
                ('type', models.CharField(choices=[('Vocal', 'Vocal'), ('Non-Vocal', 'Non-Vocal')], db_index=True, default='Vocal', max_length=16)),
                ('BPM', models.IntegerField(blank=True, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('duration', models.FloatField(help_text='Retrieved track duration in seconds', null=True, verbose_name='Length')),
                ('rating', models.CharField(blank=True, max_length=5, null=True, verbose_name='Class')),
                ('remixes', models.CharField(blank=True, max_length=255, null=True)),
                ('lyrics', models.TextField(blank=True, null=True)),
                ('celery_upload_status', models.IntegerField(choices=[(0, 'PENDING'), (1, 'PROCESSING'), (2, 'FAILED'), (3, 'SUCCESS')], db_index=True, default=0, help_text='Processing status. All tracks are processed in the background after upload. If everything is successful, then the status will be "success", if not - "failed". This field is filled during processing and cannot be changed manually.', verbose_name='Celery upload status')),
                ('plays_count', models.IntegerField(default=0, editable=False, verbose_name='Plays')),
                ('votes_count', models.IntegerField(default=0, editable=False, verbose_name='Likes')),
                ('show_new_releases', models.BooleanField(default=0)),
                ('title_search_vector', django.contrib.postgres.search.SearchVectorField(editable=False, null=True)),
                ('original_artist_search_vector', django.contrib.postgres.search.SearchVectorField(editable=False, null=True)),
                ('artist', models.ManyToManyField(help_text='Parsed artists from "Compositor" tag or filename.', related_name='tracks', to='tracks.artist', verbose_name='Artist list')),
                ('genre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tracks', to='tracks.genre')),
                ('label', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tracks', to='tracks.label')),
                ('style', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tracks', to='tracks.style')),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Created date')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated date')),
                ('text', models.TextField(blank=True, null=True, verbose_name='Raw Text')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LabelYoutube',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Created date')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated date')),
                ('url', models.URLField()),
                ('label', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='label_youtubes', to='tracks.label')),
            ],
            options={
                'verbose_name': 'YouTube link',
                'verbose_name_plural': 'YouTube links',
            },
        ),
        migrations.CreateModel(
            name='LabelSocial',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Created date')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated date')),
                ('source', models.CharField(choices=[('Facebook', 'Facebook'), ('Instagram', 'Instagram'), ('Twitter', 'Twitter'), ('VK', 'VK')], db_index=True, max_length=64, verbose_name='Social Network')),
                ('url', models.URLField()),
                ('label', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='label_social', to='tracks.label')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LabelSite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Created date')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated date')),
                ('url', models.URLField()),
                ('label', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='label_sites', to='tracks.label')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LabelMedia',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Created date')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated date')),
                ('source', models.CharField(choices=[('Spotify', 'Spotify'), ('Apple Music', 'Apple Music')], db_index=True, max_length=64, verbose_name='Service')),
                ('url', models.URLField()),
                ('label', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='label_medias', to='tracks.label')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArtistYoutube',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Created date')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated date')),
                ('url', models.URLField()),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artist_youtubes', to='tracks.artist')),
            ],
            options={
                'verbose_name': 'YouTube link',
                'verbose_name_plural': 'YouTube links',
            },
        ),
        migrations.CreateModel(
            name='ArtistSocial',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Created date')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated date')),
                ('source', models.CharField(choices=[('Facebook', 'Facebook'), ('Instagram', 'Instagram'), ('Twitter', 'Twitter'), ('VK', 'VK')], db_index=True, max_length=64, verbose_name='Social Network')),
                ('url', models.URLField()),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artist_social', to='tracks.artist')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArtistSite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Created date')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated date')),
                ('url', models.URLField()),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artist_sites', to='tracks.artist')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArtistMedia',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Created date')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated date')),
                ('source', models.CharField(choices=[('Spotify', 'Spotify'), ('Apple Music', 'Apple Music')], db_index=True, max_length=64, verbose_name='Service')),
                ('url', models.URLField()),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artist_medias', to='tracks.artist')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArtistImage',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Created date')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated date')),
                ('s3_source', models.ImageField(max_length=512, upload_to=tools.upload.ModifyUpload('s3_all'))),
                ('s3_source_width', models.IntegerField(editable=False, null=True)),
                ('s3_source_height', models.IntegerField(editable=False, null=True)),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artist_images', to='tracks.artist')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArtistAlias',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Created date')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated date')),
                ('alias', models.CharField(db_index=True, max_length=255)),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artist_aliases', to='tracks.artist')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Album',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Created date')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated date')),
                ('title', models.CharField(max_length=512, unique=True, verbose_name='Album title')),
                ('original_artist', models.CharField(blank=True, max_length=1024, null=True)),
                ('album_artist', models.CharField(blank=True, max_length=1024, null=True)),
                ('picture', models.FileField(blank=True, null=True, upload_to=tools.upload.ModifyUpload('album'))),
                ('picture_thumbnail', models.FileField(blank=True, null=True, upload_to=tools.upload.ModifyUpload('thumbnail'))),
                ('year', models.IntegerField(blank=True, null=True)),
                ('artist', models.ManyToManyField(related_name='albumd', to='tracks.artist')),
                ('genre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tracks.genre')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddIndex(
            model_name='track',
            index=django.contrib.postgres.indexes.GinIndex(fields=['title_search_vector'], name='tracks_trac_title_s_4d7c9e_gin'),
        ),
        migrations.AddIndex(
            model_name='track',
            index=django.contrib.postgres.indexes.GinIndex(fields=['original_artist_search_vector'], name='tracks_trac_origina_bb8a58_gin'),
        ),
    ]
